# Code Generated by Sidekick is for learning and experimentation purposes only.

import os
import re
from langchain_groq import ChatGroq
from dotenv import load_dotenv

load_dotenv()
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

class CodeGenerationNode:
    """
    Scans src/app for .component.ts, .component.html, .component.scss, .service.ts files.
    For each file, it calls the LLM to generate code based on the file type,
    then overwrites that file with the generated code.
    Folder structure example:
    src/app/
      components/
        dashboard/
          dashboard.component.ts
          dashboard.component.html
          dashboard.component.scss
        lms/
          lms.component.ts
          lms.component.html
          lms.component.scss
      services/
        pods/
          pods.service.ts
      pages/
        pods/
          pods.page.ts
          pods.page.html
          pods.page.scss
    ...
    """

    def __init__(self):
        self.base_path = os.getcwd()
        self.angular_project_path = os.path.join(self.base_path, "angularapp")
        self.app_path = os.path.join(self.angular_project_path, "src", "app")
        self.llm = ChatGroq(model_name="llama3-8b-8192", api_key=GROQ_API_KEY)

    def scan_app_folder(self):
        """
        Recursively find .component.ts, .component.html, .component.scss, .service.ts, and .page.* files.
        Returns a list of absolute file paths.
        """
        target_extensions = (".component.ts", ".component.html", ".component.scss",
                             ".service.ts", ".page.ts", ".page.html", ".page.scss")
        matched_files = []
        for root, dirs, files in os.walk(self.app_path):
            for filename in files:
                lower_name = filename.lower()
                if any(lower_name.endswith(ext) for ext in target_extensions):
                    full_path = os.path.join(root, filename)
                    matched_files.append(full_path)
        return matched_files

    def build_prompt_for_file(self, file_path):
        """
        Constructs a minimal prompt for the LLM based on the file name and extension.
        For example:
         - dashboard.component.ts -> Angular TypeScript for the 'dashboard' component
         - dashboard.component.html -> Angular HTML template for the 'dashboard' component
         - dashboard.component.scss -> SCSS styles for the 'dashboard' component
         - pods.service.ts -> Angular service named 'pods'
         - pods.page.ts -> Angular page component named 'pods'
        """
        filename = os.path.basename(file_path)
        folder_name = os.path.basename(os.path.dirname(file_path))

        # Read the file description if it exists
        description_file_path = os.path.join(os.path.dirname(file_path), 'file_description.txt')
        file_description = ""
        if os.path.exists(description_file_path):
            with open(description_file_path, 'r', encoding='utf-8') as desc_file:
                file_description = desc_file.read().strip()

        if filename.endswith(".component.ts"):
            base_name = filename.replace(".component.ts", "")
            prompt = f"""
You are an expert Angular developer.
Generate the complete TypeScript code for the '{base_name}' Angular component.
Follow best practices, including proper imports, decorators, and class definition.
Return only the code (no explanations).
{file_description}
"""

        elif filename.endswith(".component.html"):
            base_name = filename.replace(".component.html", "")
            prompt = f"""
You are an expert Angular developer.
Generate the complete HTML template for the '{base_name}' Angular component.
Include typical markup for a demonstration. Return only the HTML (no explanations).
{file_description}
"""

        elif filename.endswith(".component.scss"):
            base_name = filename.replace(".component.scss", "")
            prompt = f"""
You are an expert Angular developer and SCSS specialist.
Generate the complete SCSS styles for the '{base_name}' Angular component.
Use best practices for styling. Return only the SCSS code (no explanations).
{file_description}
"""

        elif filename.endswith(".service.ts"):
            base_name = filename.replace(".service.ts", "")
            prompt = f"""
You are an expert Angular developer.
Generate a complete Angular service in TypeScript named '{base_name}'.
Include proper @Injectable, typical methods, best practices. Return only the code.
{file_description}
"""

        elif filename.endswith(".page.ts"):
            base_name = filename.replace(".page.ts", "")
            prompt = f"""
You are an expert Angular developer.
Generate the complete TypeScript code for the '{base_name}' page component.
Follow best practices, including proper imports, decorators, and class definition.
Return only the code (no explanations).
{file_description}
"""

        elif filename.endswith(".page.html"):
            base_name = filename.replace(".page.html", "")
            prompt = f"""
You are an expert Angular developer.
Generate the complete HTML template for the '{base_name}' page component.
Include typical markup for a demonstration. Return only the HTML (no explanations).
{file_description}
"""

        elif filename.endswith(".page.scss"):
            base_name = filename.replace(".page.scss", "")
            prompt = f"""
You are an expert Angular developer and SCSS specialist.
Generate the complete SCSS styles for the '{base_name}' page component.
Use best practices for styling. Return only the SCSS code (no explanations).
{file_description}
"""

        else:
            prompt = f"""
You are an expert Angular developer.
Generate code for file '{filename}' in folder '{folder_name}'.
Return only the code.
{file_description}
"""

        return prompt.strip()

    def clean_generated_code(self, code):
        """
        If the generated code starts with triple backticks and ends with triple backticks,
        remove those lines. Also, strip any extra leading/trailing whitespace.
        """
        code = code.strip()
        if code.startswith("```") and code.endswith("```"):
            lines = code.splitlines()
            if lines[0].strip().startswith("```") and lines[-1].strip().startswith("```"):
                code = "\n".join(lines[1:-1]).strip()
        return code

    def generate_code_for_file(self, file_path):
        """
        Constructs a minimal prompt based on the file type, calls ChatGroq,
        and returns the code as a string.
        """
        prompt_text = self.build_prompt_for_file(file_path)
        response = self.llm.invoke(prompt_text)
        code = self.clean_generated_code(response.content.strip())
        return code

    def write_code(self, file_path, code):
        """
        Overwrites the file at file_path with the generated code.
        """
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(code)
        print(f"‚úÖ Wrote code to: {file_path}")

    def process(self):
        """
        Main entry point: find relevant Angular files, generate code, and overwrite them.
        """
        if not os.path.exists(self.app_path):
            raise FileNotFoundError(f"‚ùå 'src/app' not found in {self.angular_project_path}.")

        files_to_generate = self.scan_app_folder()
        if not files_to_generate:
            print("‚ö†Ô∏è No Angular files found to generate code for.")
            return

        for file_path in files_to_generate:
            print(f"üõ† Generating code for: {file_path}")
            code = self.generate_code_for_file(file_path)
            self.write_code(file_path, code)

if __name__ == "__main__":
    node = CodeGenerationNode()
    node.process()
