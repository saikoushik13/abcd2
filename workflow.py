# Code Generated by Sidekick is for learning and experimentation purposes only.
from langgraph.graph import StateGraph
from typing import TypedDict
from analyse import AnalysisNode
from projectsetup import ProjectSetupNode
from codegen import CodeGenerationNode
from IPython.display import Image, display
from langchain_core.runnables.graph import CurveStyle, MermaidDrawMethod, NodeStyles
# Define the workflow state
class WorkflowState(TypedDict):
    analysis_output: str
    project_setup_output: str
    codegen_output: str

# Analysis Node: Runs analysis to generate folder_structure.txt and file_descriptions.txt.
def run_analysis(state: WorkflowState) -> WorkflowState:
    print("Running Analysis Node...")
    analysis = AnalysisNode()
    analysis.run()  # This writes folder_structure.txt and file_descriptions.txt to disk.
    state["analysis_output"] = "Analysis completed: folder_structure.txt and file_descriptions.txt generated."
    return state

# ProjectSetup Node: Sets up the Angular project scaffolding (initialization, folder creation, CLI generation).
def run_project_setup(state: WorkflowState) -> WorkflowState:
    print("Running ProjectSetup Node...")
    project_setup = ProjectSetupNode()
    project_setup.run()
    state["project_setup_output"] = "Project setup completed."
    return state

# CodeGeneration Node: Reads file_descriptions.txt and generates code into project files.
def run_codegen(state: WorkflowState) -> WorkflowState:
    print("Running CodeGeneration Node...")
    codegen = CodeGenerationNode()
    codegen.process()
    state["codegen_output"] = "Code generation completed."
    return state

# Create and configure the workflow graph.
workflow = StateGraph(WorkflowState)
workflow.add_node("analysis", run_analysis)
workflow.add_node("projectsetup", run_project_setup)
workflow.add_node("codegen", run_codegen)

# Define sequential flow.
workflow.set_entry_point("analysis")
workflow.add_edge("analysis", "projectsetup")
workflow.add_edge("projectsetup", "codegen")

# Compile the workflow executor.
executor = workflow.compile()
display(
    Image(
        executor.get_graph().draw_mermaid_png(
            draw_method=MermaidDrawMethod.API,
        )
    )
)


